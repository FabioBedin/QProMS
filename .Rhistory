names(r6)
get(class(r6))
get(class(r6))
get(class(r6$loading_data)9
get(class(r6$loading_data)9
get(class(r6$loading_data)9
get(class(r6$loading_data))
class(r6$loading_data)
class(r6$selected_nodes)
class(r6$go_ora_alpha)
class(r6)
?subset2
r6$public_fields()
get(class(r6))
get(class(QProMS))
get(class(R6Class_QProMS$QProMS$new()))
?get()
names(class(self)$public_fields)
names(class(r6)$public_fields)
class(r6)
names(r6)
get(r6)
?get
mget(class(r6))
mget(class(r6))
r6 <- R6Class_QProMS$QProMS$new()
# r6$loading_data(input_path = "app/static/proteinGroups.txt", input_name = "test")
r6$loading_data(input_path = "app/static/combined_protein.tsv", input_name = "test")
msg <- r6$identify_table_type()
r6$create_summary_table()
r6$make_expdesign("MaxLFQ Intensity")
a <- tibble(
"condition" = c("xl", "xl", "xl", "non", "non", "non"),
"key" = c(
"XL_1 MaxLFQ Intensity",
"XL_2 MaxLFQ Intensity",
"XL_3 MaxLFQ Intensity",
"nonXL_1 MaxLFQ Intensity",
"nonXL_2 MaxLFQ Intensity",
"nonXL_3 MaxLFQ Intensity"
)
)
r6$validate_expdesign(a)
r6$add_replicate_and_label(a)
r6$preprocessing()
r6$protein_rank_target <- r6$expdesign$label[1]
r6$shiny_wrap_workflow()
mget(class(r6))
get(class(r6))
names(mget(class(r6))$public_fields)
names(get(class(r6))$public_fields)
names(get(class(r6$R6))$public_fields)
names(get(class(r6$self))$public_fields)
Person <- R6::R6Class("Person",
public = list(
age = NULL,
gender = NULL,
initialize = function(age, gender = "M") {
self$age <- age
self$gender <- gender
},
public_fields = function(){
return(names(get(class(self))$public_fields))
},
list_attributes = function(){
values <- purrr::map(self$public_fields(), ~.subset2(self, .x))
names(values) <- self$public_fields()
return(values)
}
))
p <- Person$new(age=42, gender="W")
p$public_fields()
names(r6$public_fields)
?map
R6_extract_values <- function(r6class){
tmp <- sapply(r6class, class)
slots <- tmp[ !tmp %in% c("environment", "function")]
res <- list()
for (i in names(slots)) {
if ("R6" %in% class(r6class[[i]])) {
res[[i]]  <- R6_extract_values(r6class[[i]])
}else{
res[[i]] <- r6class[[i]]
}
}
return(res)
}
R6_extract_values(r6)
extract_params_values <- function(r6class) {
tmp <- map_chr(r6class, class)
slots <- tmp[!tmp %in% c("environment", "function")]
imap(slots, ~ {
if ("R6" %in% class(r6class[[.y]])) {
R6_extract_values(r6class[[.y]])
} else {
r6class[[.y]]
}
})
}
extract_params_values <- function(r6class) {
tmp <- map_chr(r6class, class)
slots <- tmp[!tmp %in% c("environment", "function")]
imap(slots, ~ {
if ("R6" %in% class(r6class[[.y]])) {
R6_extract_values(r6class[[.y]])
} else {
r6class[[.y]]
}
})
}
extract_params_values(r6)
extract_params_values <- function(r6class) {
# Ottieni le classi degli elementi in r6class
tmp <- map(r6class, ~ class(.x)[1])
# Seleziona solo gli elementi che non sono "environment" o "function"
slots <- keep(tmp, ~ !.x %in% c("environment", "function"))
# Applica ricorsivamente la funzione agli elementi R6
map(names(slots), ~ {
if ("R6" %in% class(r6class[[.x]])) {
R6_extract_values(r6class[[.x]])
} else {
r6class[[.x]]
}
}) %>% set_names(names(slots))
}
extract_params_values(r6)
sapply(r6, class)
extract_params_values <- function(r6class) {
tmp <- sapply(r6class, class)
slots <- tmp[!tmp %in% c("environment", "function")]
imap(slots, ~ {
if ("R6" %in% class(r6class[[.y]])) {
R6_extract_values(r6class[[.y]])
} else {
r6class[[.y]]
}
})
}
extract_params_values(r6)
map(r6, ~ class(.x))
extract_params_values(r6) %>% View()
a <- extract_params_values(r6)
a$go_gsea_alpha
a$rank_data$gene_names[1]
extract_params_values <- function(r6class) {
tmp <- sapply(r6class, class)
slots <- tmp[!tmp %in% c("environment", "function", "list")]
imap(slots, ~ {
if ("R6" %in% class(r6class[[.y]])) {
R6_extract_values(r6class[[.y]])
} else {
r6class[[.y]]
}
})
}
a <- extract_params_values(r6)
sapply(r6, class)
slots <- tmp[!tmp %in% c("environment", "function", "tbl_df")]
extract_params_values <- function(r6class) {
tmp <- sapply(r6class, class)
slots <- tmp[!tmp %in% c("environment", "function", "tbl_df")]
imap(slots, ~ {
if ("R6" %in% class(r6class[[.y]])) {
R6_extract_values(r6class[[.y]])
} else {
r6class[[.y]]
}
})
}
a <- extract_params_values(r6)
extract_params_values <- function(r6class) {
tmp <- sapply(r6class, class)
slots <- tmp[!tmp %in% c("environment", "function", "data.frame")]
imap(slots, ~ {
if ("R6" %in% class(r6class[[.y]])) {
R6_extract_values(r6class[[.y]])
} else {
r6class[[.y]]
}
})
}
a <- extract_params_values(r6)
extract_params_values <- function(r6class) {
tmp <- sapply(r6class, class)
slots <- tmp[!tmp %in% c("environment", "function", "tibble")]
imap(slots, ~ {
if ("R6" %in% class(r6class[[.y]])) {
R6_extract_values(r6class[[.y]])
} else {
r6class[[.y]]
}
})
}
a <- extract_params_values(r6)
tmp <- sapply(r6, class)
unique(tmp)
tmp[!tmp %in% c("environment", "function", "data.table", "tbl_df")] %>% unique()
tmp[!tmp %in% c("environment", "function", "data.table", "data.frame")] %>% unique()
tmp[!tmp %in% c("environment", "function", list("data.table", "data.frame"))] %>% unique()
tmp[!tmp %in% c("environment", "function", c("data.table", "data.frame"))] %>% unique()
tmp[!tmp %in% c("environment", "function", "logical")] %>% unique()
flatten_chr(tmp)
flatten(tmp)
flatten(tmp) %>% unique()
map(tmp, pluck, 1)
map(tmp, pluck, 1) %>% unique()
extract_params_values <- function(r6class) {
tmp <- sapply(r6class, class)
tmp <- map(tmp, pluck, 1)
slots <- tmp[!tmp %in% c("environment", "function", "data.table", "tbl_df")]
imap(slots, ~ {
if ("R6" %in% class(r6class[[.y]])) {
R6_extract_values(r6class[[.y]])
} else {
r6class[[.y]]
}
})
}
a <- extract_params_values(r6)
extract_params_values <- function(r6class) {
tmp <- sapply(r6class, class)
slots <- tmp[!tmp %in% c("environment", "function")]
imap(slots, ~ {
if ("R6" %in% class(r6class[[.y]])) {
R6_extract_values(r6class[[.y]])
} else {
r6class[[.y]]
}
})
}
a <- extract_params_values(r6)
box::reload(R6Class_QProMS)
box::use(app/static/inputs_type_lists)
box::use(app/static/contaminants)
r6 <- R6Class_QProMS$QProMS$new()
# r6$loading_data(input_path = "app/static/proteinGroups.txt", input_name = "test")
r6$loading_data(input_path = "app/static/combined_protein.tsv", input_name = "test")
msg <- r6$identify_table_type()
r6$create_summary_table()
r6$make_expdesign("MaxLFQ Intensity")
a <- tibble(
"condition" = c("xl", "xl", "xl", "non", "non", "non"),
"key" = c(
"XL_1 MaxLFQ Intensity",
"XL_2 MaxLFQ Intensity",
"XL_3 MaxLFQ Intensity",
"nonXL_1 MaxLFQ Intensity",
"nonXL_2 MaxLFQ Intensity",
"nonXL_3 MaxLFQ Intensity"
)
)
r6$validate_expdesign(a)
r6$add_replicate_and_label(a)
r6$preprocessing()
r6$protein_rank_target <- r6$expdesign$label[1]
r6$shiny_wrap_workflow()
r6$plot_pca(FALSE)
r6$organism <- "human"
r6$contrasts <- "xl_vs_non"
aa <- r6$save_params_as_list(r6)
aa$pdb_database <- "pippo"
r6$loading_parameters(r6, parameters_list = aa)
r6$pdb_database
box::reload(R6Class_QProMS)
r6 <- R6Class_QProMS$QProMS$new()
# r6$loading_data(input_path = "app/static/proteinGroups.txt", input_name = "test")
r6$loading_data(input_path = "app/static/combined_protein.tsv", input_name = "test")
msg <- r6$identify_table_type()
r6$create_summary_table()
r6$make_expdesign("MaxLFQ Intensity")
a <- tibble(
"condition" = c("xl", "xl", "xl", "non", "non", "non"),
"key" = c(
"XL_1 MaxLFQ Intensity",
"XL_2 MaxLFQ Intensity",
"XL_3 MaxLFQ Intensity",
"nonXL_1 MaxLFQ Intensity",
"nonXL_2 MaxLFQ Intensity",
"nonXL_3 MaxLFQ Intensity"
)
)
r6$validate_expdesign(a)
r6$add_replicate_and_label(a)
r6$preprocessing()
r6$protein_rank_target <- r6$expdesign$label[1]
r6$shiny_wrap_workflow()
r6$plot_pca(FALSE)
r6$organism <- "human"
r6$contrasts <- "xl_vs_non"
r6$contrasts <- "xl_vs_non"
aa <- r6$save_params_as_list(r6)
r6$pdb_database
aa$pdb_database <- "pippo"
r6$loading_parameters(r6, parameters_list = aa)
r6$pdb_database
?yaml
rhino::pkg_install("yaml")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(tidyr)
library(purrr)
library(stringr)
library(tibble)
library(echarts4r)
library(trelliscope)
library(rbioapi)
library(org.Hs.eg.db)
library(clusterProfiler)
box::use(app/logic/R6Class_QProMS)
box::use(app/static/inputs_type_lists)
box::use(app/static/contaminants)
r6 <- R6Class_QProMS$QProMS$new()
getwd()
r6$loading_parameters(input_path = "/Users/bedin.fabio/Desktop/QProMS_parameters_2024-09-04.yaml")
r6$plot_pca(FALSE)
r6$pdb_database
r6$anova_table
box::reload(R6Class_QProMS)
r6 <- R6Class_QProMS$QProMS$new()
r6$loading_parameters(input_path = "/Users/bedin.fabio/Desktop/QProMS_parameters_2024-09-04.yaml")
a <- r6$loading_parameters(input_path = "/Users/bedin.fabio/Desktop/QProMS_parameters_2024-09-04.yaml")
box::reload(R6Class_QProMS)
r6 <- R6Class_QProMS$QProMS$new()
a <- r6$loading_parameters(input_path = "/Users/bedin.fabio/Desktop/QProMS_parameters_2024-09-04.yaml")
box::reload(R6Class_QProMS)
r6 <- R6Class_QProMS$QProMS$new()
a <- r6$loading_parameters(input_path = "/Users/bedin.fabio/Desktop/QProMS_parameters_2024-09-04.yaml", r6)
r6$plot_pca(FALSE)
View(a)
View(r6)
r6$data
r6$data %>% str()
box::reload(R6Class_QProMS)
r6 <- R6Class_QProMS$QProMS$new()
r6$loading_parameters(input_path = "/Users/bedin.fabio/Desktop/QProMS_parameters_2024-09-04.yaml", r6)
box::reload(R6Class_QProMS)
r6 <- R6Class_QProMS$QProMS$new()
r6$loading_parameters(input_path = "/Users/bedin.fabio/Desktop/QProMS_parameters_2024-09-04.yaml", r6)
a <- r6$loading_parameters(input_path = "/Users/bedin.fabio/Desktop/QProMS_parameters_2024-09-04.yaml", r6)
box::reload(R6Class_QProMS)
r6 <- R6Class_QProMS$QProMS$new()
a <- r6$loading_parameters(input_path = "/Users/bedin.fabio/Desktop/QProMS_parameters_2024-09-04.yaml", r6)
r6$plot_pca(FALSE)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
map(tmp, pluck, 1) %>% unique()
box::reload(R6Class_QProMS)
r6 <- R6Class_QProMS$QProMS$new()
# r6$loading_data(input_path = "app/static/proteinGroups.txt", input_name = "test")
r6$loading_data(input_path = "app/static/combined_protein.tsv", input_name = "test")
msg <- r6$identify_table_type()
r6$create_summary_table()
r6$make_expdesign("MaxLFQ Intensity")
a <- tibble(
"condition" = c("xl", "xl", "xl", "non", "non", "non"),
"key" = c(
"XL_1 MaxLFQ Intensity",
"XL_2 MaxLFQ Intensity",
"XL_3 MaxLFQ Intensity",
"nonXL_1 MaxLFQ Intensity",
"nonXL_2 MaxLFQ Intensity",
"nonXL_3 MaxLFQ Intensity"
)
)
r6$validate_expdesign(a)
r6$add_replicate_and_label(a)
r6$preprocessing()
r6$protein_rank_target <- r6$expdesign$label[1]
r6$shiny_wrap_workflow()
r6$plot_pca(FALSE)
r6$organism <- "human"
r6$contrasts <- "xl_vs_non"
r6$stat_uni_test(test = "xl_vs_non", fc = 1, alpha = 0.05, p_adj_method = "BH", paired_test = FALSE, test_type = "welch")
tmp <- sapply(r6, class)
map(tmp, pluck, 1) %>% unique()
map(tmp, pluck, 1) %>% View()
tmp <- map(tmp, pluck, 1)
tmp <- sapply(r6, class)
tmp <- map(tmp, pluck, 1)
tmp[!tmp %in% c("environment", "function", "tbl_df", "data.table")] %>% unique()
tmp <- tmp[!tmp %in% c("environment", "function", "tbl_df", "data.table")]
tmp$raw_data <- r6$raw_data
tmp$pippo <- "NULL"
shiny::runApp()
shiny::runApp()
shiny::runApp()
box::reload(R6Class_QProMS)
r6 <- R6Class_QProMS$QProMS$new()
# r6$loading_data(input_path = "app/static/proteinGroups.txt", input_name = "test")
r6$loading_data(input_path = "app/static/combined_protein.tsv", input_name = "test")
msg <- r6$identify_table_type()
r6$create_summary_table()
r6$make_expdesign("MaxLFQ Intensity")
a <- tibble(
"condition" = c("xl", "xl", "xl", "non", "non", "non"),
"key" = c(
"XL_1 MaxLFQ Intensity",
"XL_2 MaxLFQ Intensity",
"XL_3 MaxLFQ Intensity",
"nonXL_1 MaxLFQ Intensity",
"nonXL_2 MaxLFQ Intensity",
"nonXL_3 MaxLFQ Intensity"
)
)
r6$validate_expdesign(a)
r6$add_replicate_and_label(a)
r6$preprocessing()
r6$protein_rank_target <- r6$expdesign$label[1]
r6$shiny_wrap_workflow()
r6$plot_pca(FALSE)
r6$organism <- "human"
r6$contrasts <- "xl_vs_non"
r6$clusters_number <- 3
r6$stat_anova(alpha = 0.05, p_adj_method = "BH")
tmp <- sapply(r6, class)
unique(tmp)
tmp <- map(tmp, pluck, 1)
unique(tmp)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a <- extract_params_values(r6)
extract_params_values <- function(r6class) {
tmp <- sapply(r6class, class)
slots <- tmp[!tmp %in% c("environment", "function")]
imap(slots, ~ {
if ("R6" %in% class(r6class[[.y]])) {
R6_extract_values(r6class[[.y]])
} else {
r6class[[.y]]
}
})
}
a <- extract_params_values(r6)
rhino::pkg_install("rlist")
'rlist::list.save()
?rlist::list.save()
?rlist::list.load
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?input_switch
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?palettePicker
?updateRadioButtons()
shiny::run+
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rhino::pkg_install("quarto")
rhino::pkg_install("quarto")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
